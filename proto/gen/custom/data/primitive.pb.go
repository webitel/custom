// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: custom/data/primitive.proto

package datapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kind of primitive type(s).
type Kind int32

const (
	Kind_none     Kind = 0
	Kind_list     Kind = 1 // [array]
	Kind_bool     Kind = 2
	Kind_int      Kind = 3 // int32
	Kind_int32    Kind = 4
	Kind_int64    Kind = 5
	Kind_uint     Kind = 6 // uint32
	Kind_uint32   Kind = 7
	Kind_uint64   Kind = 8
	Kind_float    Kind = 9 // float32
	Kind_float32  Kind = 10
	Kind_float64  Kind = 11
	Kind_binary   Kind = 12
	Kind_lookup   Kind = 13
	Kind_string   Kind = 14
	Kind_richtext Kind = 15
	Kind_datetime Kind = 16 // date &| time
	Kind_duration Kind = 17
)

// Enum value maps for Kind.
var (
	Kind_name = map[int32]string{
		0:  "none",
		1:  "list",
		2:  "bool",
		3:  "int",
		4:  "int32",
		5:  "int64",
		6:  "uint",
		7:  "uint32",
		8:  "uint64",
		9:  "float",
		10: "float32",
		11: "float64",
		12: "binary",
		13: "lookup",
		14: "string",
		15: "richtext",
		16: "datetime",
		17: "duration",
	}
	Kind_value = map[string]int32{
		"none":     0,
		"list":     1,
		"bool":     2,
		"int":      3,
		"int32":    4,
		"int64":    5,
		"uint":     6,
		"uint32":   7,
		"uint64":   8,
		"float":    9,
		"float32":  10,
		"float64":  11,
		"binary":   12,
		"lookup":   13,
		"string":   14,
		"richtext": 15,
		"datetime": 16,
		"duration": 17,
	}
)

func (x Kind) Enum() *Kind {
	p := new(Kind)
	*p = x
	return p
}

func (x Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_custom_data_primitive_proto_enumTypes[0].Descriptor()
}

func (Kind) Type() protoreflect.EnumType {
	return &file_custom_data_primitive_proto_enumTypes[0]
}

func (x Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kind.Descriptor instead.
func (Kind) EnumDescriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{0}
}

type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{0}
}

type Int struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// DESIGN. Custom error(s) on spec. constraint violation.
	// map < constraint, template > to produce [status.message].
	//
	//	{
	//	  "min": "country code {value} MUST contain at least 2 digits"
	//	  "max": "country code {value} MAY contain at most 4 digits"
	//	}
	Violation map[string]string `protobuf:"bytes,5,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Int) Reset() {
	*x = Int{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int) ProtoMessage() {}

func (x *Int) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int.ProtoReflect.Descriptor instead.
func (*Int) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{1}
}

func (x *Int) GetMin() *wrapperspb.Int64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Int) GetMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Int) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

type Uint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min       *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max       *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Violation map[string]string       `protobuf:"bytes,5,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Uint) Reset() {
	*x = Uint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint) ProtoMessage() {}

func (x *Uint) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint.ProtoReflect.Descriptor instead.
func (*Uint) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{2}
}

func (x *Uint) GetMin() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Uint) GetMax() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Uint) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

type Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frac      uint32                  `protobuf:"varint,3,opt,name=frac,proto3" json:"frac,omitempty"` // fractional part precision
	Min       *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max       *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Violation map[string]string       `protobuf:"bytes,5,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Float) Reset() {
	*x = Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float) ProtoMessage() {}

func (x *Float) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float.ProtoReflect.Descriptor instead.
func (*Float) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{3}
}

func (x *Float) GetFrac() uint32 {
	if x != nil {
		return x.Frac
	}
	return 0
}

func (x *Float) GetMin() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Float) GetMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Float) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBytes  uint32            `protobuf:"varint,1,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	MaxChars  uint32            `protobuf:"varint,2,opt,name=max_chars,json=maxChars,proto3" json:"max_chars,omitempty"`
	Multiline bool              `protobuf:"varint,3,opt,name=multiline,proto3" json:"multiline,omitempty"`
	Violation map[string]string `protobuf:"bytes,5,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Text) Reset() {
	*x = Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{4}
}

func (x *Text) GetMaxBytes() uint32 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

func (x *Text) GetMaxChars() uint32 {
	if x != nil {
		return x.MaxChars
	}
	return 0
}

func (x *Text) GetMultiline() bool {
	if x != nil {
		return x.Multiline
	}
	return false
}

func (x *Text) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

type Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBytes  uint32            `protobuf:"varint,1,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	Violation map[string]string `protobuf:"bytes,5,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Binary) Reset() {
	*x = Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{5}
}

func (x *Binary) GetMaxBytes() uint32 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

func (x *Binary) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

// Lookup data reference type descriptor.
type Lookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Readonly]. Dataset title.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [Required]. Reference dataset relative path
	// e.g.: "contacts", "dictionaries/cities".
	// (lookup).{`type`} value relation.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// [Readonly]. Primary dataset field.
	// (lookup).{`id`} value relation.
	Primary string `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	// [Readonly]. Display dataset field.
	// (lookup).{`name`} value relation.
	Display string `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
	// Optional. Query dataset filters ...
	// map < filter, template >
	Query map[string]string `protobuf:"bytes,11,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// [ "not_found", "too_much_records" ]
	Violation map[string]string `protobuf:"bytes,12,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Lookup) Reset() {
	*x = Lookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lookup) ProtoMessage() {}

func (x *Lookup) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lookup.ProtoReflect.Descriptor instead.
func (*Lookup) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{6}
}

func (x *Lookup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lookup) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Lookup) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *Lookup) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *Lookup) GetQuery() map[string]string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Lookup) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

// Datetime type settings.
type Datetime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timezone associated.
	// Default: `UTC`.
	Zone string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	// Custom EPOCH timestamp.
	// If zero - UNIX epoch (1970-01-01 00:00:00) will be used.
	Epoch float64 `protobuf:"fixed64,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Display format.
	// See [layouts](https://pkg.go.dev/time#pkg-constants) for details.
	// Default: `Mon, 02 Jan 2006 15:04:05 -0700`; [time.RFC1123Z]
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Datetime) Reset() {
	*x = Datetime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datetime) ProtoMessage() {}

func (x *Datetime) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datetime.ProtoReflect.Descriptor instead.
func (*Datetime) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{7}
}

func (x *Datetime) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Datetime) GetEpoch() float64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Datetime) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// Duration
type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min       *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max       *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Violation map[string]string      `protobuf:"bytes,5,rep,name=violation,proto3" json:"violation,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Display format.
	// TODO: `hh:mm:ss.ms`
	Format string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{8}
}

func (x *Duration) GetMin() *wrapperspb.Int64Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Duration) GetMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Duration) GetViolation() map[string]string {
	if x != nil {
		return x.Violation
	}
	return nil
}

func (x *Duration) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// Primitive type descriptor.
type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind of primitive type.
	Kind Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=webitel.custom.data.Kind" json:"kind,omitempty"`
	// Data type constraints.
	//
	// Types that are assignable to Type:
	//
	//	*DataType_Bool
	//	*DataType_Int32
	//	*DataType_Int64
	//	*DataType_Int
	//	*DataType_Uint32
	//	*DataType_Uint64
	//	*DataType_Uint
	//	*DataType_Float32
	//	*DataType_Float64
	//	*DataType_Float
	//	*DataType_Binary
	//	*DataType_Lookup
	//	*DataType_String_
	//	*DataType_Richtext
	//	*DataType_Datetime
	//	*DataType_Duration
	Type isDataType_Type `protobuf_oneof:"type"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_data_primitive_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_custom_data_primitive_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_custom_data_primitive_proto_rawDescGZIP(), []int{9}
}

func (x *DataType) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_none
}

func (m *DataType) GetType() isDataType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DataType) GetBool() *Bool {
	if x, ok := x.GetType().(*DataType_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *DataType) GetInt32() *Int {
	if x, ok := x.GetType().(*DataType_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *DataType) GetInt64() *Int {
	if x, ok := x.GetType().(*DataType_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *DataType) GetInt() *Int {
	if x, ok := x.GetType().(*DataType_Int); ok {
		return x.Int
	}
	return nil
}

func (x *DataType) GetUint32() *Uint {
	if x, ok := x.GetType().(*DataType_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *DataType) GetUint64() *Uint {
	if x, ok := x.GetType().(*DataType_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *DataType) GetUint() *Uint {
	if x, ok := x.GetType().(*DataType_Uint); ok {
		return x.Uint
	}
	return nil
}

func (x *DataType) GetFloat32() *Float {
	if x, ok := x.GetType().(*DataType_Float32); ok {
		return x.Float32
	}
	return nil
}

func (x *DataType) GetFloat64() *Float {
	if x, ok := x.GetType().(*DataType_Float64); ok {
		return x.Float64
	}
	return nil
}

func (x *DataType) GetFloat() *Float {
	if x, ok := x.GetType().(*DataType_Float); ok {
		return x.Float
	}
	return nil
}

func (x *DataType) GetBinary() *Binary {
	if x, ok := x.GetType().(*DataType_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *DataType) GetLookup() *Lookup {
	if x, ok := x.GetType().(*DataType_Lookup); ok {
		return x.Lookup
	}
	return nil
}

func (x *DataType) GetString_() *Text {
	if x, ok := x.GetType().(*DataType_String_); ok {
		return x.String_
	}
	return nil
}

func (x *DataType) GetRichtext() *Text {
	if x, ok := x.GetType().(*DataType_Richtext); ok {
		return x.Richtext
	}
	return nil
}

func (x *DataType) GetDatetime() *Datetime {
	if x, ok := x.GetType().(*DataType_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (x *DataType) GetDuration() *Duration {
	if x, ok := x.GetType().(*DataType_Duration); ok {
		return x.Duration
	}
	return nil
}

type isDataType_Type interface {
	isDataType_Type()
}

type DataType_Bool struct {
	Bool *Bool `protobuf:"bytes,12,opt,name=bool,proto3,oneof"`
}

type DataType_Int32 struct {
	Int32 *Int `protobuf:"bytes,13,opt,name=int32,proto3,oneof"`
}

type DataType_Int64 struct {
	Int64 *Int `protobuf:"bytes,14,opt,name=int64,proto3,oneof"`
}

type DataType_Int struct {
	Int *Int `protobuf:"bytes,15,opt,name=int,proto3,oneof"`
}

type DataType_Uint32 struct {
	Uint32 *Uint `protobuf:"bytes,16,opt,name=uint32,proto3,oneof"`
}

type DataType_Uint64 struct {
	Uint64 *Uint `protobuf:"bytes,17,opt,name=uint64,proto3,oneof"`
}

type DataType_Uint struct {
	Uint *Uint `protobuf:"bytes,18,opt,name=uint,proto3,oneof"`
}

type DataType_Float32 struct {
	Float32 *Float `protobuf:"bytes,19,opt,name=float32,proto3,oneof"`
}

type DataType_Float64 struct {
	Float64 *Float `protobuf:"bytes,20,opt,name=float64,proto3,oneof"`
}

type DataType_Float struct {
	Float *Float `protobuf:"bytes,21,opt,name=float,proto3,oneof"`
}

type DataType_Binary struct {
	Binary *Binary `protobuf:"bytes,26,opt,name=binary,proto3,oneof"`
}

type DataType_Lookup struct {
	Lookup *Lookup `protobuf:"bytes,27,opt,name=lookup,proto3,oneof"`
}

type DataType_String_ struct {
	String_ *Text `protobuf:"bytes,22,opt,name=string,proto3,oneof"`
}

type DataType_Richtext struct {
	Richtext *Text `protobuf:"bytes,23,opt,name=richtext,proto3,oneof"`
}

type DataType_Datetime struct {
	Datetime *Datetime `protobuf:"bytes,24,opt,name=datetime,proto3,oneof"`
}

type DataType_Duration struct {
	Duration *Duration `protobuf:"bytes,25,opt,name=duration,proto3,oneof"`
}

func (*DataType_Bool) isDataType_Type() {}

func (*DataType_Int32) isDataType_Type() {}

func (*DataType_Int64) isDataType_Type() {}

func (*DataType_Int) isDataType_Type() {}

func (*DataType_Uint32) isDataType_Type() {}

func (*DataType_Uint64) isDataType_Type() {}

func (*DataType_Uint) isDataType_Type() {}

func (*DataType_Float32) isDataType_Type() {}

func (*DataType_Float64) isDataType_Type() {}

func (*DataType_Float) isDataType_Type() {}

func (*DataType_Binary) isDataType_Type() {}

func (*DataType_Lookup) isDataType_Type() {}

func (*DataType_String_) isDataType_Type() {}

func (*DataType_Richtext) isDataType_Type() {}

func (*DataType_Datetime) isDataType_Type() {}

func (*DataType_Duration) isDataType_Type() {}

var File_custom_data_primitive_proto protoreflect.FileDescriptor

var file_custom_data_primitive_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0xe8, 0x01, 0x0a, 0x03, 0x49,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x45, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x2e, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x04, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x46,
	0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72,
	0x61, 0x63, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xad, 0x01, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe4, 0x02, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x38, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x4a, 0x0a, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x99, 0x07, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x30, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x04, 0x75,
	0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x32, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xd8,
	0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x0e, 0x12,
	0x0c, 0x0a, 0x08, 0x72, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x10, 0x0f, 0x12, 0x0c, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_custom_data_primitive_proto_rawDescOnce sync.Once
	file_custom_data_primitive_proto_rawDescData = file_custom_data_primitive_proto_rawDesc
)

func file_custom_data_primitive_proto_rawDescGZIP() []byte {
	file_custom_data_primitive_proto_rawDescOnce.Do(func() {
		file_custom_data_primitive_proto_rawDescData = protoimpl.X.CompressGZIP(file_custom_data_primitive_proto_rawDescData)
	})
	return file_custom_data_primitive_proto_rawDescData
}

var file_custom_data_primitive_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_custom_data_primitive_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_custom_data_primitive_proto_goTypes = []any{
	(Kind)(0),                      // 0: webitel.custom.data.Kind
	(*Bool)(nil),                   // 1: webitel.custom.data.Bool
	(*Int)(nil),                    // 2: webitel.custom.data.Int
	(*Uint)(nil),                   // 3: webitel.custom.data.Uint
	(*Float)(nil),                  // 4: webitel.custom.data.Float
	(*Text)(nil),                   // 5: webitel.custom.data.Text
	(*Binary)(nil),                 // 6: webitel.custom.data.Binary
	(*Lookup)(nil),                 // 7: webitel.custom.data.Lookup
	(*Datetime)(nil),               // 8: webitel.custom.data.Datetime
	(*Duration)(nil),               // 9: webitel.custom.data.Duration
	(*DataType)(nil),               // 10: webitel.custom.data.DataType
	nil,                            // 11: webitel.custom.data.Int.ViolationEntry
	nil,                            // 12: webitel.custom.data.Uint.ViolationEntry
	nil,                            // 13: webitel.custom.data.Float.ViolationEntry
	nil,                            // 14: webitel.custom.data.Text.ViolationEntry
	nil,                            // 15: webitel.custom.data.Binary.ViolationEntry
	nil,                            // 16: webitel.custom.data.Lookup.QueryEntry
	nil,                            // 17: webitel.custom.data.Lookup.ViolationEntry
	nil,                            // 18: webitel.custom.data.Duration.ViolationEntry
	(*wrapperspb.Int64Value)(nil),  // 19: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil), // 20: google.protobuf.UInt64Value
	(*wrapperspb.DoubleValue)(nil), // 21: google.protobuf.DoubleValue
}
var file_custom_data_primitive_proto_depIdxs = []int32{
	19, // 0: webitel.custom.data.Int.min:type_name -> google.protobuf.Int64Value
	19, // 1: webitel.custom.data.Int.max:type_name -> google.protobuf.Int64Value
	11, // 2: webitel.custom.data.Int.violation:type_name -> webitel.custom.data.Int.ViolationEntry
	20, // 3: webitel.custom.data.Uint.min:type_name -> google.protobuf.UInt64Value
	20, // 4: webitel.custom.data.Uint.max:type_name -> google.protobuf.UInt64Value
	12, // 5: webitel.custom.data.Uint.violation:type_name -> webitel.custom.data.Uint.ViolationEntry
	21, // 6: webitel.custom.data.Float.min:type_name -> google.protobuf.DoubleValue
	21, // 7: webitel.custom.data.Float.max:type_name -> google.protobuf.DoubleValue
	13, // 8: webitel.custom.data.Float.violation:type_name -> webitel.custom.data.Float.ViolationEntry
	14, // 9: webitel.custom.data.Text.violation:type_name -> webitel.custom.data.Text.ViolationEntry
	15, // 10: webitel.custom.data.Binary.violation:type_name -> webitel.custom.data.Binary.ViolationEntry
	16, // 11: webitel.custom.data.Lookup.query:type_name -> webitel.custom.data.Lookup.QueryEntry
	17, // 12: webitel.custom.data.Lookup.violation:type_name -> webitel.custom.data.Lookup.ViolationEntry
	19, // 13: webitel.custom.data.Duration.min:type_name -> google.protobuf.Int64Value
	19, // 14: webitel.custom.data.Duration.max:type_name -> google.protobuf.Int64Value
	18, // 15: webitel.custom.data.Duration.violation:type_name -> webitel.custom.data.Duration.ViolationEntry
	0,  // 16: webitel.custom.data.DataType.kind:type_name -> webitel.custom.data.Kind
	1,  // 17: webitel.custom.data.DataType.bool:type_name -> webitel.custom.data.Bool
	2,  // 18: webitel.custom.data.DataType.int32:type_name -> webitel.custom.data.Int
	2,  // 19: webitel.custom.data.DataType.int64:type_name -> webitel.custom.data.Int
	2,  // 20: webitel.custom.data.DataType.int:type_name -> webitel.custom.data.Int
	3,  // 21: webitel.custom.data.DataType.uint32:type_name -> webitel.custom.data.Uint
	3,  // 22: webitel.custom.data.DataType.uint64:type_name -> webitel.custom.data.Uint
	3,  // 23: webitel.custom.data.DataType.uint:type_name -> webitel.custom.data.Uint
	4,  // 24: webitel.custom.data.DataType.float32:type_name -> webitel.custom.data.Float
	4,  // 25: webitel.custom.data.DataType.float64:type_name -> webitel.custom.data.Float
	4,  // 26: webitel.custom.data.DataType.float:type_name -> webitel.custom.data.Float
	6,  // 27: webitel.custom.data.DataType.binary:type_name -> webitel.custom.data.Binary
	7,  // 28: webitel.custom.data.DataType.lookup:type_name -> webitel.custom.data.Lookup
	5,  // 29: webitel.custom.data.DataType.string:type_name -> webitel.custom.data.Text
	5,  // 30: webitel.custom.data.DataType.richtext:type_name -> webitel.custom.data.Text
	8,  // 31: webitel.custom.data.DataType.datetime:type_name -> webitel.custom.data.Datetime
	9,  // 32: webitel.custom.data.DataType.duration:type_name -> webitel.custom.data.Duration
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_custom_data_primitive_proto_init() }
func file_custom_data_primitive_proto_init() {
	if File_custom_data_primitive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_custom_data_primitive_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Int); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Uint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Lookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Datetime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_data_primitive_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_custom_data_primitive_proto_msgTypes[9].OneofWrappers = []any{
		(*DataType_Bool)(nil),
		(*DataType_Int32)(nil),
		(*DataType_Int64)(nil),
		(*DataType_Int)(nil),
		(*DataType_Uint32)(nil),
		(*DataType_Uint64)(nil),
		(*DataType_Uint)(nil),
		(*DataType_Float32)(nil),
		(*DataType_Float64)(nil),
		(*DataType_Float)(nil),
		(*DataType_Binary)(nil),
		(*DataType_Lookup)(nil),
		(*DataType_String_)(nil),
		(*DataType_Richtext)(nil),
		(*DataType_Datetime)(nil),
		(*DataType_Duration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_custom_data_primitive_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_custom_data_primitive_proto_goTypes,
		DependencyIndexes: file_custom_data_primitive_proto_depIdxs,
		EnumInfos:         file_custom_data_primitive_proto_enumTypes,
		MessageInfos:      file_custom_data_primitive_proto_msgTypes,
	}.Build()
	File_custom_data_primitive_proto = out.File
	file_custom_data_primitive_proto_rawDesc = nil
	file_custom_data_primitive_proto_goTypes = nil
	file_custom_data_primitive_proto_depIdxs = nil
}
