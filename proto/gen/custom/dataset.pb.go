// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: custom/dataset.proto

package custompb

import (
	data "github.com/webitel/proto/gen/custom/data"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the composite structure.
type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo  string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`   // string name = 2; // Repository (dataset) name (plural form), e.g.: `countries`.
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`   // string title = 3; // A User-friendly display name ; lang:specific.
	Path  string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`   // Readonly. Relative path to access the dataset APIs, e.g.: `dictionaries/countries`.
	About string `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"` // Optional. Short description of data usage.
	// Fields of the data structure.
	Fields []*Field `protobuf:"bytes,11,rep,name=fields,proto3" json:"fields,omitempty"`
	// Required. Primary [fields.id] key.
	// Used as [lookup].id setting for this [struct] type.
	Primary string `protobuf:"bytes,12,opt,name=primary,proto3" json:"primary,omitempty"`
	// Required. Display [fields.id] key.
	// Used as [lookup].name setting for this [struct] type.
	Display string `protobuf:"bytes,13,opt,name=display,proto3" json:"display,omitempty"`
	// INDEX fields.
	Indices map[string]*Index `protobuf:"bytes,14,rep,name=indices,proto3" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Extension extension = 15;
	// Readonly. Is [ system / custom ] type ?
	// NOTE: Custom [types.repo] are always prefixed with `/dictionaries`
	Readonly bool `protobuf:"varint,21,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Readonly. System- type(s) support only !
	Extendable bool    `protobuf:"varint,22,opt,name=extendable,proto3" json:"extendable,omitempty"`
	CreatedAt  int64   `protobuf:"varint,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy  *Lookup `protobuf:"bytes,32,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt  int64   `protobuf:"varint,33,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy  *Lookup `protobuf:"bytes,34,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_dataset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_custom_dataset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_custom_dataset_proto_rawDescGZIP(), []int{0}
}

func (x *Dataset) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Dataset) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *Dataset) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Dataset) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *Dataset) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *Dataset) GetIndices() map[string]*Index {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Dataset) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Dataset) GetExtendable() bool {
	if x != nil {
		return x.Extendable
	}
	return false
}

func (x *Dataset) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Dataset) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Dataset) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Dataset) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

// Field of the struct.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field [code] name.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // code
	// Title of the field. Lang specific.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // title
	// Short description. Default: {name}.
	Hint string `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
	// Required. Kind of primitive type.
	Kind data.Kind `protobuf:"varint,11,opt,name=kind,proto3,enum=webitel.custom.data.Kind" json:"kind,omitempty"`
	// Required. Data type constraints.
	//
	// Types that are assignable to Type:
	//
	//	*Field_Bool
	//	*Field_Int32
	//	*Field_Int64
	//	*Field_Int
	//	*Field_Uint32
	//	*Field_Uint64
	//	*Field_Uint
	//	*Field_Float32
	//	*Field_Float64
	//	*Field_Float
	//	*Field_Binary
	//	*Field_Lookup
	//	*Field_String_
	//	*Field_Richtext
	//	*Field_Datetime
	//	*Field_Duration
	Type isField_Type `protobuf_oneof:"type"`
	// Generated field value.
	//
	// Types that are assignable to Value:
	//
	//	*Field_Default
	//	*Field_Always
	Value isField_Value `protobuf_oneof:"value"`
	// Optional. Disable any write (INSERT OR UPDATE) operations.
	// READONLY signifies that the field value will be always computed on any write (INSERT OR UPDATE) operations.
	// If selected, the `default` value MUST be specified.
	Readonly bool `protobuf:"varint,61,opt,name=readonly,proto3" json:"readonly,omitempty"` // FIXME: Is base field ? [ id, created_, updated_ ]
	// Optional. Do NOT allow NULL values !
	Required bool `protobuf:"varint,62,opt,name=required,proto3" json:"required,omitempty"`
	// Optional. Disable any (READ OR WRITE) operations.
	Disabled bool `protobuf:"varint,63,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Is hidden (system) field ?
	// Do NOT display on the `view` card ?
	Hidden bool `protobuf:"varint,64,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_dataset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_custom_dataset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_custom_dataset_proto_rawDescGZIP(), []int{1}
}

func (x *Field) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *Field) GetKind() data.Kind {
	if x != nil {
		return x.Kind
	}
	return data.Kind(0)
}

func (m *Field) GetType() isField_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Field) GetBool() *data.Bool {
	if x, ok := x.GetType().(*Field_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *Field) GetInt32() *data.Int {
	if x, ok := x.GetType().(*Field_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *Field) GetInt64() *data.Int {
	if x, ok := x.GetType().(*Field_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *Field) GetInt() *data.Int {
	if x, ok := x.GetType().(*Field_Int); ok {
		return x.Int
	}
	return nil
}

func (x *Field) GetUint32() *data.Uint {
	if x, ok := x.GetType().(*Field_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *Field) GetUint64() *data.Uint {
	if x, ok := x.GetType().(*Field_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *Field) GetUint() *data.Uint {
	if x, ok := x.GetType().(*Field_Uint); ok {
		return x.Uint
	}
	return nil
}

func (x *Field) GetFloat32() *data.Float {
	if x, ok := x.GetType().(*Field_Float32); ok {
		return x.Float32
	}
	return nil
}

func (x *Field) GetFloat64() *data.Float {
	if x, ok := x.GetType().(*Field_Float64); ok {
		return x.Float64
	}
	return nil
}

func (x *Field) GetFloat() *data.Float {
	if x, ok := x.GetType().(*Field_Float); ok {
		return x.Float
	}
	return nil
}

func (x *Field) GetBinary() *data.Binary {
	if x, ok := x.GetType().(*Field_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Field) GetLookup() *data.Lookup {
	if x, ok := x.GetType().(*Field_Lookup); ok {
		return x.Lookup
	}
	return nil
}

func (x *Field) GetString_() *data.Text {
	if x, ok := x.GetType().(*Field_String_); ok {
		return x.String_
	}
	return nil
}

func (x *Field) GetRichtext() *data.Text {
	if x, ok := x.GetType().(*Field_Richtext); ok {
		return x.Richtext
	}
	return nil
}

func (x *Field) GetDatetime() *data.Datetime {
	if x, ok := x.GetType().(*Field_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (x *Field) GetDuration() *data.Duration {
	if x, ok := x.GetType().(*Field_Duration); ok {
		return x.Duration
	}
	return nil
}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Field) GetDefault() *structpb.Value {
	if x, ok := x.GetValue().(*Field_Default); ok {
		return x.Default
	}
	return nil
}

func (x *Field) GetAlways() *structpb.Value {
	if x, ok := x.GetValue().(*Field_Always); ok {
		return x.Always
	}
	return nil
}

func (x *Field) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Field) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Field) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Field) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type isField_Type interface {
	isField_Type()
}

type Field_Bool struct {
	Bool *data.Bool `protobuf:"bytes,12,opt,name=bool,proto3,oneof"`
}

type Field_Int32 struct {
	Int32 *data.Int `protobuf:"bytes,13,opt,name=int32,proto3,oneof"`
}

type Field_Int64 struct {
	Int64 *data.Int `protobuf:"bytes,14,opt,name=int64,proto3,oneof"`
}

type Field_Int struct {
	Int *data.Int `protobuf:"bytes,15,opt,name=int,proto3,oneof"`
}

type Field_Uint32 struct {
	Uint32 *data.Uint `protobuf:"bytes,16,opt,name=uint32,proto3,oneof"`
}

type Field_Uint64 struct {
	Uint64 *data.Uint `protobuf:"bytes,17,opt,name=uint64,proto3,oneof"`
}

type Field_Uint struct {
	Uint *data.Uint `protobuf:"bytes,18,opt,name=uint,proto3,oneof"`
}

type Field_Float32 struct {
	Float32 *data.Float `protobuf:"bytes,19,opt,name=float32,proto3,oneof"`
}

type Field_Float64 struct {
	Float64 *data.Float `protobuf:"bytes,20,opt,name=float64,proto3,oneof"`
}

type Field_Float struct {
	Float *data.Float `protobuf:"bytes,21,opt,name=float,proto3,oneof"`
}

type Field_Binary struct {
	Binary *data.Binary `protobuf:"bytes,22,opt,name=binary,proto3,oneof"`
}

type Field_Lookup struct {
	Lookup *data.Lookup `protobuf:"bytes,23,opt,name=lookup,proto3,oneof"`
}

type Field_String_ struct {
	String_ *data.Text `protobuf:"bytes,24,opt,name=string,proto3,oneof"`
}

type Field_Richtext struct {
	Richtext *data.Text `protobuf:"bytes,25,opt,name=richtext,proto3,oneof"`
}

type Field_Datetime struct {
	Datetime *data.Datetime `protobuf:"bytes,26,opt,name=datetime,proto3,oneof"`
}

type Field_Duration struct {
	Duration *data.Duration `protobuf:"bytes,27,opt,name=duration,proto3,oneof"`
}

func (*Field_Bool) isField_Type() {}

func (*Field_Int32) isField_Type() {}

func (*Field_Int64) isField_Type() {}

func (*Field_Int) isField_Type() {}

func (*Field_Uint32) isField_Type() {}

func (*Field_Uint64) isField_Type() {}

func (*Field_Uint) isField_Type() {}

func (*Field_Float32) isField_Type() {}

func (*Field_Float64) isField_Type() {}

func (*Field_Float) isField_Type() {}

func (*Field_Binary) isField_Type() {}

func (*Field_Lookup) isField_Type() {}

func (*Field_String_) isField_Type() {}

func (*Field_Richtext) isField_Type() {}

func (*Field_Datetime) isField_Type() {}

func (*Field_Duration) isField_Type() {}

type isField_Value interface {
	isField_Value()
}

type Field_Default struct {
	// [ ON INSERT ONLY ]
	//
	// The `default` expression will be used in `INSERT` operation
	// that does not specify a value for the field.
	//
	// If there is no default for a field, then the default is null.
	Default *structpb.Value `protobuf:"bytes,51,opt,name=default,proto3,oneof"`
}

type Field_Always struct {
	// [ ON INSERT OR UPDATE ]
	//
	// Always signifies that the field value will be computed on any write (INSERT OR UPDATE) operations.
	// The field cannot be written to, and when read the result of the last generated expression will be returned.
	//
	// The generation expression can refer to other columns in the table, but not other generated columns. Any functions and operators used must be immutable. References to other tables are not allowed.
	Always *structpb.Value `protobuf:"bytes,52,opt,name=always,proto3,oneof"`
}

func (*Field_Default) isField_Value() {}

func (*Field_Always) isField_Value() {}

// INDEX [struct.fields].
type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether set of [fields] MUST be UNIQUE within [type].
	Unique bool `protobuf:"varint,1,opt,name=unique,proto3" json:"unique,omitempty"`
	// A set of [struct.fields.id] to INDEX within [type] dataset.
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// A set of [struct.fields.id] to INCLUDE beside the [fields] index.
	Include []string `protobuf:"bytes,3,rep,name=include,proto3" json:"include,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_dataset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_custom_dataset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_custom_dataset_proto_rawDescGZIP(), []int{2}
}

func (x *Index) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *Index) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Index) GetInclude() []string {
	if x != nil {
		return x.Include
	}
	return nil
}

type DatasetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of `Dataset` types.
	Data []*Dataset `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Page number of the results.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Next page available ?
	Next bool `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *DatasetList) Reset() {
	*x = DatasetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_custom_dataset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetList) ProtoMessage() {}

func (x *DatasetList) ProtoReflect() protoreflect.Message {
	mi := &file_custom_dataset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetList.ProtoReflect.Descriptor instead.
func (*DatasetList) Descriptor() ([]byte, []int) {
	return file_custom_dataset_proto_rawDescGZIP(), []int{3}
}

func (x *DatasetList) GetData() []*Dataset {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DatasetList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DatasetList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

var File_custom_dataset_proto protoreflect.FileDescriptor

var file_custom_dataset_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x04, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x51,
	0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x0b, 0x4a, 0x04, 0x08,
	0x0f, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x4a, 0x04, 0x08, 0x19, 0x10, 0x1a, 0x22,
	0xbb, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x2f, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2f, 0x0a,
	0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65,
	0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36,
	0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x32,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x69, 0x63, 0x68, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x06,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x0b, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x33, 0x4a, 0x04, 0x08, 0x35, 0x10, 0x3d, 0x22, 0x51, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x22, 0x62, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x3b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_custom_dataset_proto_rawDescOnce sync.Once
	file_custom_dataset_proto_rawDescData = file_custom_dataset_proto_rawDesc
)

func file_custom_dataset_proto_rawDescGZIP() []byte {
	file_custom_dataset_proto_rawDescOnce.Do(func() {
		file_custom_dataset_proto_rawDescData = protoimpl.X.CompressGZIP(file_custom_dataset_proto_rawDescData)
	})
	return file_custom_dataset_proto_rawDescData
}

var file_custom_dataset_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_custom_dataset_proto_goTypes = []any{
	(*Dataset)(nil),        // 0: webitel.custom.Dataset
	(*Field)(nil),          // 1: webitel.custom.Field
	(*Index)(nil),          // 2: webitel.custom.Index
	(*DatasetList)(nil),    // 3: webitel.custom.DatasetList
	nil,                    // 4: webitel.custom.Dataset.IndicesEntry
	(*Lookup)(nil),         // 5: webitel.custom.Lookup
	(data.Kind)(0),         // 6: webitel.custom.data.Kind
	(*data.Bool)(nil),      // 7: webitel.custom.data.Bool
	(*data.Int)(nil),       // 8: webitel.custom.data.Int
	(*data.Uint)(nil),      // 9: webitel.custom.data.Uint
	(*data.Float)(nil),     // 10: webitel.custom.data.Float
	(*data.Binary)(nil),    // 11: webitel.custom.data.Binary
	(*data.Lookup)(nil),    // 12: webitel.custom.data.Lookup
	(*data.Text)(nil),      // 13: webitel.custom.data.Text
	(*data.Datetime)(nil),  // 14: webitel.custom.data.Datetime
	(*data.Duration)(nil),  // 15: webitel.custom.data.Duration
	(*structpb.Value)(nil), // 16: google.protobuf.Value
}
var file_custom_dataset_proto_depIdxs = []int32{
	1,  // 0: webitel.custom.Dataset.fields:type_name -> webitel.custom.Field
	4,  // 1: webitel.custom.Dataset.indices:type_name -> webitel.custom.Dataset.IndicesEntry
	5,  // 2: webitel.custom.Dataset.created_by:type_name -> webitel.custom.Lookup
	5,  // 3: webitel.custom.Dataset.updated_by:type_name -> webitel.custom.Lookup
	6,  // 4: webitel.custom.Field.kind:type_name -> webitel.custom.data.Kind
	7,  // 5: webitel.custom.Field.bool:type_name -> webitel.custom.data.Bool
	8,  // 6: webitel.custom.Field.int32:type_name -> webitel.custom.data.Int
	8,  // 7: webitel.custom.Field.int64:type_name -> webitel.custom.data.Int
	8,  // 8: webitel.custom.Field.int:type_name -> webitel.custom.data.Int
	9,  // 9: webitel.custom.Field.uint32:type_name -> webitel.custom.data.Uint
	9,  // 10: webitel.custom.Field.uint64:type_name -> webitel.custom.data.Uint
	9,  // 11: webitel.custom.Field.uint:type_name -> webitel.custom.data.Uint
	10, // 12: webitel.custom.Field.float32:type_name -> webitel.custom.data.Float
	10, // 13: webitel.custom.Field.float64:type_name -> webitel.custom.data.Float
	10, // 14: webitel.custom.Field.float:type_name -> webitel.custom.data.Float
	11, // 15: webitel.custom.Field.binary:type_name -> webitel.custom.data.Binary
	12, // 16: webitel.custom.Field.lookup:type_name -> webitel.custom.data.Lookup
	13, // 17: webitel.custom.Field.string:type_name -> webitel.custom.data.Text
	13, // 18: webitel.custom.Field.richtext:type_name -> webitel.custom.data.Text
	14, // 19: webitel.custom.Field.datetime:type_name -> webitel.custom.data.Datetime
	15, // 20: webitel.custom.Field.duration:type_name -> webitel.custom.data.Duration
	16, // 21: webitel.custom.Field.default:type_name -> google.protobuf.Value
	16, // 22: webitel.custom.Field.always:type_name -> google.protobuf.Value
	0,  // 23: webitel.custom.DatasetList.data:type_name -> webitel.custom.Dataset
	2,  // 24: webitel.custom.Dataset.IndicesEntry.value:type_name -> webitel.custom.Index
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_custom_dataset_proto_init() }
func file_custom_dataset_proto_init() {
	if File_custom_dataset_proto != nil {
		return
	}
	file_custom_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_custom_dataset_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_dataset_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_dataset_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_custom_dataset_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DatasetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_custom_dataset_proto_msgTypes[1].OneofWrappers = []any{
		(*Field_Bool)(nil),
		(*Field_Int32)(nil),
		(*Field_Int64)(nil),
		(*Field_Int)(nil),
		(*Field_Uint32)(nil),
		(*Field_Uint64)(nil),
		(*Field_Uint)(nil),
		(*Field_Float32)(nil),
		(*Field_Float64)(nil),
		(*Field_Float)(nil),
		(*Field_Binary)(nil),
		(*Field_Lookup)(nil),
		(*Field_String_)(nil),
		(*Field_Richtext)(nil),
		(*Field_Datetime)(nil),
		(*Field_Duration)(nil),
		(*Field_Default)(nil),
		(*Field_Always)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_custom_dataset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_custom_dataset_proto_goTypes,
		DependencyIndexes: file_custom_dataset_proto_depIdxs,
		MessageInfos:      file_custom_dataset_proto_msgTypes,
	}.Build()
	File_custom_dataset_proto = out.File
	file_custom_dataset_proto_rawDesc = nil
	file_custom_dataset_proto_goTypes = nil
	file_custom_dataset_proto_depIdxs = nil
}
